---
import Layout from "@/layouts/Layout.astro";
import ResetPasswordForm from "@/components/auth/ResetPasswordForm";
---

<script>
  import { createBrowserClient } from "@supabase/ssr";
  
  // This script runs client-side after the page loads
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      // Create the Supabase browser client
      const supabase = createBrowserClient(
        import.meta.env.PUBLIC_SUPABASE_URL!,
        import.meta.env.PUBLIC_SUPABASE_KEY!
      );
      
      // Get the hash from the URL
      const hash = window.location.hash;
      console.log("URL hash:", hash);
      
      if (hash) {
        console.log("Auth redirect detected with hash, processing authentication");
        
        // Exchange the recovery token for a session
        // This will automatically parse the hash from the URL and set up the session
        try {
          // Try to capture and process the auth code from the hash if present
          if (hash.includes("code=")) {
            const code = new URLSearchParams(hash.substring(1)).get("code");
            if (code) {
              console.log("Auth code found, exchanging for session");
              const { data, error } = await supabase.auth.exchangeCodeForSession(code);
              
              if (error) {
                console.error("Error exchanging code for session:", error);
                window.dispatchEvent(
                  new CustomEvent("supabaseSessionEstablished", {
                    detail: { success: false, error: error.message }
                  })
                );
              } else {
                console.log("Session established via code exchange");
                window.dispatchEvent(
                  new CustomEvent("supabaseSessionEstablished", {
                    detail: { success: true, session: data.session }
                  })
                );
              }
              return;
            }
          }
          
          // If no code found, try to get the current session
          console.log("Getting current session with hash present");
          const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
          
          if (sessionError) {
            console.error("Error getting session:", sessionError);
            window.dispatchEvent(
              new CustomEvent("supabaseSessionEstablished", {
                detail: { success: false, error: sessionError.message }
              })
            );
          } else if (sessionData.session) {
            console.log("Session found:", !!sessionData.session);
            window.dispatchEvent(
              new CustomEvent("supabaseSessionEstablished", {
                detail: { success: true, session: sessionData.session }
              })
            );
          } else {
            console.log("No session found despite hash presence");
            window.dispatchEvent(
              new CustomEvent("supabaseSessionEstablished", {
                detail: { success: false, error: "No active session found" }
              })
            );
          }
        } catch (error) {
          console.error("Error processing hash:", error);
          window.dispatchEvent(
            new CustomEvent("supabaseSessionEstablished", {
              detail: { success: false, error: error instanceof Error ? error.message : "Unknown error" }
            })
          );
        }
      } else {
        console.log("No auth hash found, checking for session anyway");
        // No hash means no direct recovery flow, but we'll check for session just in case
        const { data, error } = await supabase.auth.getSession();
        
        if (error) {
          console.error("Error checking session:", error);
        }
        
        if (data.session) {
          console.log("Active session found without hash");
          window.dispatchEvent(
            new CustomEvent("supabaseSessionEstablished", {
              detail: { success: true, session: data.session }
            })
          );
        } else {
          console.log("No hash and no active session");
          window.dispatchEvent(
            new CustomEvent("supabaseSessionEstablished", {
              detail: { success: false, error: "No recovery token found and no active session" }
            })
          );
        }
      }
    } catch (e) {
      console.error("Unhandled error in auth processing:", e);
      // Dispatch event indicating session establishment failed
      window.dispatchEvent(
        new CustomEvent("supabaseSessionEstablished", {
          detail: { success: false, error: e instanceof Error ? e.message : "Unknown error" }
        })
      );
    }
  });
</script>

<Layout title="Reset Password">
  <main class="flex min-h-[calc(100vh-4rem)] flex-col items-center justify-center p-4 bg-gray-900">
    <ResetPasswordForm client:load />
  </main>
</Layout> 