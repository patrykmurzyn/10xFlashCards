name: CI Workflow

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  unit-tests:
    runs-on: ubuntu-latest
    needs: [lint] # Only run unit tests if linting passes
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Create .env file for unit tests
        run: |
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" > .env
          echo "PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}" >> .env
          echo "PUBLIC_SUPABASE_KEY=${{ secrets.PUBLIC_SUPABASE_KEY }}" >> .env

      - name: Run unit tests
        run: npm run test

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [lint] # Only run E2E tests if linting passes (in parallel with unit tests)
    timeout-minutes: 30
    environment: Test # Use the environment with the configured secrets
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      # Clear any existing browser processes
      - name: Clean processes
        run: |
          killall -9 chrome || true
          killall -9 chromium || true
          killall -9 firefox || true
          mkdir -p screenshots

      # Install Playwright browsers
      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Create .env file for application
        run: |
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" > .env
          echo "PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}" >> .env
          echo "PUBLIC_SUPABASE_KEY=${{ secrets.PUBLIC_SUPABASE_KEY }}" >> .env

      - name: Create .env.test file for E2E tests
        run: |
          echo "E2E_USERNAME=${{ secrets.E2E_USERNAME }}" > .env.test
          echo "E2E_PASSWORD=${{ secrets.E2E_PASSWORD }}" >> .env.test
          echo "OPENROUTER_API_KEY=${{ secrets.OPENROUTER_API_KEY }}" >> .env.test
          echo "PUBLIC_SUPABASE_URL=${{ secrets.PUBLIC_SUPABASE_URL }}" >> .env.test
          echo "PUBLIC_SUPABASE_KEY=${{ secrets.PUBLIC_SUPABASE_KEY }}" >> .env.test

      # Increase file descriptors limit for test process
      - name: Increase file descriptors limit
        run: |
          ulimit -n 65535 || true

      - name: Run E2E tests
        run: npm run e2e
        env:
          CI: true # Make sure process.env.CI is set to true for the Playwright config
          # Set NODE_OPTIONS to increase memory limit
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Upload Playwright report
        if: always() # Upload report even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

      - name: Upload Playwright test results
        if: always() # Upload test results even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/
          retention-days: 7

  status-comment:
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, e2e-tests] # Only run when all three jobs pass
    if: github.event_name == 'pull_request' # Only run on pull requests
    steps:
      - name: Post status comment
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { issue: { number: issue_number }, repo: { owner, repo } } = context;

            const workflow_url = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;

            const comment = `## ✅ All CI checks passed successfully!

            - ✓ Linting passed
            - ✓ Unit tests passed
            - ✓ E2E tests passed

            [View workflow run details](${workflow_url})`;

            github.rest.issues.createComment({
              issue_number,
              owner,
              repo,
              body: comment
            });
